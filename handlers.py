import re
from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command, CommandObject
from aiogram.fsm.context import FSMContext
from datetime import datetime
from states import Form
from utils import get_current_temperature, translate_rus_to_eng, get_food_data, get_workout_data
from config import NUTRIONIX_APP_ID, NUTRIONIX_API_KEY, OPENWEATHERMAP_API_KEY
from supports import calc_water_goal, calc_calorie_goal, calc_calorie_consumption, water_requierement

city_pattern = r'\b[a-z–∞-—è][a-z–∞-—è]*(?:-[a-z–∞-—è][a-z–∞-—è]*)?\b'
comp_city_patt = re.compile(city_pattern, re.IGNORECASE)

router = Router()

users_ds = {}
users_daily_records = {}


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ –ø–µ—Ä–µ—Å—á–µ—Ç —Ü–µ–ª–µ—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å –∑–∞–ø—Ä–æ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
async def auto_update_records(user_id):
    current_date = datetime.today().date().strftime("%d.%m.%Y")
    
    if users_ds[user_id].get("last_update") != current_date:
        user = users_ds[user_id]
        user_weight = user["weight"]
        user_height = user["height"]
        user_age = user["age"]
        user_activity = user["activity"]
        user_location = user["location"]

        user_temp = await get_current_temperature(user_location, OPENWEATHERMAP_API_KEY)

        new_records = {
            "water_goal": calc_water_goal(user_weight, user_activity, user_temp),
            "calorie_goal": calc_calorie_goal(user_weight, user_height, user_age),
            "logged_water": 0,
            "logged_calories": 0,
            "burned_calories": 0
        }

        users_daily_records[user_id] = {current_date: new_records}
        users_ds[user_id]["last_update"] = current_date


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    state_data = await state.get_data()

    if bool(state_data) or user_id in users_ds:
        users_ds.pop(user_id, None)
        users_daily_records.pop(user_id, None)

        await state.clear()

        await message.reply(
            "üîÑ –ë–æ—Ç –±—ã–ª –æ–±–Ω–æ–≤–ª—ë–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–µ–ª —Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö.\n"
            "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_profile."
        )
    else:
        await message.reply("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –≤–∞—à —Ñ–∏—Ç–Ω–µ—Å-–±–æ—Ç!\n–ß—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@router.message(Command("help"))
async def cmd_help(message: Message):
    await message.reply(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n"
        "/set_profile - –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è. –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—É—é —Ñ–æ—Ä–º—É –ø–æ–≤—Ç–æ—Ä–Ω–æ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏\n"
        "/log_water <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –≤ –º–ª> - –î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–∏—Ç–æ–π –≤–æ–¥—ã –≤ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/log_food <–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–º–º> - –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≥–ª–æ—â—ë–Ω–Ω—ã—Ö –∫–∞–ª–æ—Ä–∏–π –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/log_workout <—Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏> <–≤—Ä–µ–º—è (–º–∏–Ω)> - –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–æ–∂–∂—ë–Ω–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏ –∏ —É—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞—Å—Ö–æ–¥ –≤–æ–¥—ã –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ\n"
        "/check_progress - –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–æ–º—É, —Å–∫–æ–ª—å–∫–æ –≤–æ–¥—ã –∏ –∫–∞–ª–æ—Ä–∏–π –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–æ, —Å–æ–∂–∂–µ–Ω–æ –∏ —Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–µ–ª–∏ –Ω–∞ —Ç–µ–∫—É—â–∏–µ —Å—É—Ç–∫–∏\n"
    )


# –§–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(Command("set_profile"))
async def start_form(message: Message, state: FSMContext):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):")
    await state.set_state(Form.weight)

@router.message(Form.weight)
async def process_weight(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer(
            "‚õîÔ∏è –û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≤–µ—Å–∞.\n"
            "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á–∏—Å–ª–∞"
        )
        return
    else:
        await state.update_data(weight=message.text)
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):")
        await state.set_state(Form.height)

@router.message(Form.height)
async def process_height(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer(
            "‚õîÔ∏è –û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ä–æ—Å—Ç–∞.\n"
            "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á–∏—Å–ª–∞"
        )
        return
    else:
        await state.update_data(height=message.text)
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
        await state.set_state(Form.age)

@router.message(Form.age)
async def process_age(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer(
            "‚õîÔ∏è –û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞.\n"
            "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á–∏—Å–ª–∞"
        )
        return
    else:
        await state.update_data(age=message.text)
        await message.reply("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É –≤–∞—Å –≤ –¥–µ–Ω—å?")
        await state.set_state(Form.activity)

@router.message(Form.activity)
async def process_activity(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer(
            "‚õîÔ∏è –û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –º–∏–Ω. –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏/–¥–µ–Ω—å.\n"
            "–£–∫–∞–∂–∏—Ç–µ –º–∏–Ω. –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏/–¥–µ–Ω—å –≤–æ–∑—Ä–∞—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á–∏—Å–ª–∞"
        )
        return
    else:
        await state.update_data(activity=message.text)
        await message.reply("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?")
        await state.set_state(Form.location)

@router.message(Form.location)
async def process_location(message: Message, state: FSMContext):
    if comp_city_patt.match(message.text):
        data = await state.get_data()
        weight = int(data.get("weight"))
        height = int(data.get("height"))
        age = int(data.get("age"))
        activity = int(data.get("activity"))
        location = message.text

        current_date = datetime.today().date().strftime("%d.%m.%Y")
        user_loc_temp = await get_current_temperature(location, OPENWEATHERMAP_API_KEY)
        logged_water, logged_calories, burned_calories = 0, 0, 0

        new_user_info = {
            "weight": weight,
            "height": height,
            "age": age,
            "activity": activity,
            "city": location,
            "last_update": current_date
        }
        users_ds.update({message.from_user.id: new_user_info})

        user_records = {
            "water_goal": calc_water_goal(weight, activity, user_loc_temp),
            "calorie_goal": calc_calorie_goal(weight, height, age),
            "logged_water": logged_water,
            "logged_calories": logged_calories,
            "burned_calories": burned_calories
        }
        registration_date = datetime.today().date().strftime("%d.%m.%Y")
        users_daily_records.update({message.from_user.id: {registration_date: user_records}})

        await message.answer(
            "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!\n"
            f"–í–µ—Å: {weight} –∫–≥\n"
            f"–†–æ—Å—Ç: {height} —Å–º\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç\n"
            f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activity} –º–∏–Ω—É—Ç\n"
            f"–ì–æ—Ä–æ–¥: {location}\n"
            f"–ù–æ—Ä–º–∞ –≤–æ–¥—ã: {users_daily_records[message.from_user.id][registration_date]['water_goal']} –º–ª\n"
            f"–¶–µ–ª—å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º: {users_daily_records[message.from_user.id][registration_date]['calorie_goal']} –∫–∫–∞–ª\n"
            f"–í—ã–ø–∏—Ç–æ –≤–æ–¥—ã: {users_daily_records[message.from_user.id][registration_date]['logged_water']} –º–ª\n"
            f"–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: {users_daily_records[message.from_user.id][registration_date]['logged_calories']} –∫–∫–∞–ª\n"
            f"–°–æ–∂–∂–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: {users_daily_records[message.from_user.id][registration_date]['burned_calories']} –∫–∫–∞–ª\n"
        )
        await state.clear()

    else:
        await message.answer(
            "‚õîÔ∏è –û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≥–æ—Ä–æ–¥–∞ –≤–∞—à–µ–≥–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è.\n"
            "–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤–∞—à–µ–≥–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"
        )
        return
    

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–¥—ã
@router.message(Command("log_water"))
async def log_water(message: Message, command: CommandObject):
    if message.from_user.id not in users_ds:
        await message.answer(
            "‚õîÔ∏è –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–Ω–µ—Å–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n"
            "–í–Ω–µ—Å–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É"
        )
        return

    await auto_update_records(message.from_user.id)
    current_date = datetime.today().date().strftime("%d.%m.%Y")

    if command.args is None:
        await message.answer(
            "‚õîÔ∏è –û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã"
        )
        return
    
    if not command.args.isdigit():
        await message.answer(
            "‚õîÔ∏è –û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–¥—ã. –ü—Ä–∏–º–µ—Ä:\n"
            "/log_water <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>"
        )
        return
    
    water_consumed = int(command.args)
    if water_consumed <= 0:
        await message.answer(
            "‚õîÔ∏è –û—à–∏–±–∫–∞: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–∏—Ç–æ–π –≤–æ–¥—ã –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ —á–µ–º 0 –º–ª."
        )
        return
    
    users_daily_records[message.from_user.id][current_date]["logged_water"] += water_consumed

    await message.answer(
        f"ü•õ –í—ã–ø–∏—Ç–æ {water_consumed} –º–ª. –≤–æ–¥—ã\n"
        )


# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–¥—ã
@router.message(Command("log_food"))
async def log_food(message: Message, command: CommandObject):
    if message.from_user.id not in users_ds:
        await message.answer(
            "‚õîÔ∏è –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–Ω–µ—Å–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n"
            "–í–Ω–µ—Å–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É"
        )
        return  

    await auto_update_records(message.from_user.id)
    current_date = datetime.today().date().strftime("%d.%m.%Y")

    if command.args is None:
        await message.answer(
            "‚õîÔ∏è –û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã"
        )
        return

    try:
        product, gramms = command.args.split(" ", maxsplit=1)
    except:
        await message.answer(
            "‚õîÔ∏è –û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –µ–¥—ã. –ü—Ä–∏–º–µ—Ä:\n"
            "/log_food <–µ–¥–∞, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Å—ä–µ–ª–∏> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—ä–µ–¥–µ–Ω–Ω–æ–π –µ–¥—ã –≤ –≥—Ä–∞–º–º–∞—Ö>"
        )
        return

    if not gramms.isdigit():
        await message.answer(
            "‚õîÔ∏è –û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –µ–¥—ã. –ü—Ä–∏–º–µ—Ä:\n"
            "/log_food –±–∞–Ω–∞–Ω 123"
        )
        return
    
    gramms = int(gramms)
    if gramms <= 0:
        await message.answer(
            "‚õîÔ∏è –û—à–∏–±–∫–∞: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—ä–µ–¥–µ–Ω–Ω–æ–π –µ–¥—ã –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å > 0"
        )
        return

    product = product.lower()
    eng_product = await translate_rus_to_eng(product)
    
    product_info = await get_food_data(eng_product, 
                                       NUTRIONIX_APP_ID, 
                                       NUTRIONIX_API_KEY)
    product_cal = product_info["foods"][0]["nf_calories"]
    
    user_cons_cal = calc_calorie_consumption(product_cal, gramms)
    users_daily_records[message.from_user.id][current_date]["logged_calories"] += user_cons_cal

    await message.answer(
        f"üçΩ {product} - {product_cal} –∫–∫–∞–ª. –Ω–∞ 100 –≥.\n"
        f"–ë—ã–ª–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–æ {user_cons_cal} –∫–∫–∞–ª."
        )


# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
@router.message(Command("log_workout"))
async def log_workout(message: Message, command: CommandObject):
    if message.from_user.id not in users_ds:
        await message.answer(
            "‚õîÔ∏è –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–Ω–µ—Å–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n"
            "–í–Ω–µ—Å–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É"
        )
        return      

    await auto_update_records(message.from_user.id)
    current_date = datetime.today().date().strftime("%d.%m.%Y")

    if command.args is None:
        await message.answer(
            "‚õîÔ∏è –û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã"
        )
        return

    try:
        train_type, duration = command.args.split(" ", maxsplit=1)
    except:
        await message.answer(
            "‚õîÔ∏è –û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –ü—Ä–∏–º–µ—Ä:\n"
            "/log_workout <—Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏> <–≤—Ä–µ–º—è (–º–∏–Ω)>"
        )
        return

    if not duration.isdigit():
        await message.answer(
            "‚õîÔ∏è –û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –ü—Ä–∏–º–µ—Ä:\n"
            "/log_workout –æ—Ç–∂–∏–º–∞–Ω–∏—è 5"
        )
        return
    
    duration = int(duration)
    if duration <= 0:
        await message.answer(
            "‚õîÔ∏è –û—à–∏–±–∫–∞: –í—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å > 0"
        )
        return

    train_type = train_type.lower()
    eng_train_type = await translate_rus_to_eng(train_type)

    train_info = await get_workout_data(duration, 
                                        eng_train_type, 
                                        NUTRIONIX_APP_ID, 
                                        NUTRIONIX_API_KEY)
    burned_calories = train_info['exercises'][0]['nf_calories']
    water_needed = water_requierement(duration)
    
    users_daily_records[message.from_user.id][current_date]["burned_calories"] += burned_calories

    await message.answer(
        f"üî• {train_type} {duration} –º–∏–Ω—É—Ç - {burned_calories} –∫–∫–∞–ª.\n"
        f"ü•õ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –≤—ã–ø–µ–π—Ç–µ {water_needed} –º–ª –≤–æ–¥—ã."
        )
    

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–Ω—É—Ç—Ä–∏ –¥–Ω—è
@router.message(Command("check_progress"))
async def check_progress(message: Message):
    if message.from_user.id not in users_ds:
        await message.answer(
            "‚õîÔ∏è –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–Ω–µ—Å–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n"
            "–í–Ω–µ—Å–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É"
        )
        return

    await auto_update_records(message.from_user.id)
    current_date = datetime.today().date().strftime("%d.%m.%Y")
    user_id = message.from_user.id

    water_goal = users_daily_records[user_id][current_date]["water_goal"]
    logged_water = users_daily_records[user_id][current_date]["logged_water"]
    if water_goal > logged_water:
        remaining_water = round(water_goal - logged_water)
    else:
        remaining_water = 0
    calorie_goal = users_daily_records[user_id][current_date]["calorie_goal"]
    logged_calories = round(users_daily_records[user_id][current_date]["logged_calories"])
    burned_calories = round(users_daily_records[user_id][current_date]["burned_calories"])
    calories_balance = round(logged_calories - burned_calories)

    await message.answer(
        f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ {current_date}:\n"
        "–í–æ–¥–∞:\n"
        f"- –í—ã–ø–∏—Ç–æ: {logged_water} –º–ª. –∏–∑ {water_goal}\n"
        f"- –û—Å—Ç–∞–ª–æ—Å—å: {remaining_water} –º–ª.\n"
        "\n–ö–∞–ª–æ—Ä–∏–∏:\n"
        f"- –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {logged_calories} –∫–∫–∞–ª. –∏–∑ {calorie_goal} –∫–∫–∞–ª.\n"
        f"- –°–æ–∂–∂–µ–Ω–æ: {burned_calories} –∫–∫–∞–ª.\n"
        f"- –ë–∞–ª–∞–Ω—Å: {calories_balance} –∫–∫–∞–ª."
    )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def setup_handlers(dp):
    dp.include_router(router)